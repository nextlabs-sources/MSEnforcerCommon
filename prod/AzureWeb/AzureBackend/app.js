const express = require('express')
const bodyParser = require('body-parser')
const session = require('express-session')
const DocumentClient = require('documentdb').DocumentClient
const routes = require('./routes')
const extRoutes = require('./external_routes')
const middlewares = require('./middlewares')
const path = require('path')
const config = require('./config')
const DBInitializer = require('./dal/initializer')
const app = express()

global.conn = new DocumentClient(config.database.url, { masterKey: config.database.key })
const initializer = new DBInitializer(conn)

initializer.init(config.database.name, Object.keys(config.table).map(tk => config.table[tk]))
.then(() => {
    app.use('/static', express.static(path.join(__dirname, 'public/static')))
    .use(middlewares.SPARouter)
    .use(session({ secret: 'nextlabs', resave: false, saveUninitialized: false, cookie: { maxAge: 1800000 } }))
    .use(bodyParser.json({ limit: '1mb' }))
    .use(middlewares.CORS)
    .use('/api/token', middlewares.authorization, routes.token)
    .use('/api/databases', middlewares.authorization, routes.database)
    .use('/api/tables', middlewares.authorization, routes.table)
    .use('/api/conns', middlewares.authorization, routes.conn)
    .use('/api/columns', middlewares.authorization, routes.column)
    .use('/api/user_attributes', middlewares.authorization, routes.user_attributes)
    .use('/api/general_settings', middlewares.authorization, routes.general_settings)
    .use('/api/clients', middlewares.authorization, routes.client)
    .use('/api/login', routes.login)
    .use('/api/signup', routes.signup)
    .use('/api/proxy', middlewares.authorization, routes.proxy)
    .use('/api/credentials', middlewares.authorization, routes.credential)
    .use('/api/ad_users', middlewares.authorization, routes.ad_users)
    .use('/ext_api/server', extRoutes.server)
    .use('/ext_api/table', extRoutes.table)
    .use('/ext_api/account', extRoutes.account)
    .use('/ext_api/setting', extRoutes.setting)
    .listen(process.env.PORT)

    console.log(`server running on ${process.env.PORT}`)
})
.catch(err => {
    console.log(`init database failed: ${err.message}`)
})
